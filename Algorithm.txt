Algorithm:
 Name: Team 4
Date modified: 07/20/21
Description: Create an algorithm for javaGamev3. This program is a quiz game that will add the user to learn about java. The game will prompt the user’ name and to answer 8 sets of questions and answers about Java. The correct answer is displayed after each question. Rules are also displayed in the game.

1a. Create several global variables. It shall be used within the menue choice and for scroe keeping purposes.
private static final String SEE_RULES = "1) See Rules";
				private static final String PLAY_GAME = "2) Play Game";
				private static final String EXIT_GAME = "3) Exit Game";
				private static int score = 0, antiScore = 0; // antiScore: keeps tracks the amount of the the  wrong answer is selected
									// score keep tracks of the right answer selected. 

1b. Display and create the title of the game . Store it as  gameTitle.

gameTitle = “title “


2.    Display a description of the game to the user. This does not need to be a variable. It shall only be used once.
ex. “A quiz game to practice the concepts that you learn in your intro to Java class
The game consist of 10 questions that covers various chapters in the book.
Though this is a game to master your concepts, treat this as a real test. 
The top 3 scores will be posted on our 'All Stars' board, so try your hardest. Good Luck!”

3. Get the user’s name. Store it as fullName.
Ex. This is an example within java using javax.swing.JOptionPane .
fullName = JOptionPane.showInputDialog(null, "Enter your name:",gameTitle,JOptionPane.PLAIN_MESSAGE);



4. Create a rule book for the game. Store it as gameRules.
gameRules= “title “

5. Create the game ’s menu options. Store it as mainMenuOptions.
The main menu options must include exit, see rules, and play game.
5a. 'See rules' will have the same information as gameRules.
String[] mainMenuOptions;
				mainMenuOptions = new String[3];
				mainMenuOptions[0]= SEE_RULES;
				mainMenuOptions[1]= PLAY_GAME;
				mainMenuOptions [2]= EXIT_GAME;
				


6. Display game’s menu options and personalized it by including the user’s name within the display.  This might require to store as another variable it as mainMenu.
Ex. This is an example within java using javax.swing.JOptionPane .
mainMenu = (String) JOptionPane.showInputDialog(null, "Select a Main Menu Choice:",gameTitle,JOptionPane.QUESTION_MESSAGE,null,mainMenuOptions,SEE_RULES);



7. Display game’s menu  again but make a decision structure to determine the path of the game based on the user’s main menu choice within a loop . 

Ex. This is an example within java using javax.swing.JOptionPane .

do {
				mainMenu = (String) JOptionPane.showInputDialog(null, "Select a Main Menu Choice:",gameTitle,JOptionPane.QUESTION_MESSAGE,null,mainMenuOptions,SEE_RULES);


				if (mainMenu.equals(SEE_RULES))
					
					JOptionPane.showMessageDialog(null, "Rules:\n\n" + gameRules, gameTitle,JOptionPane.PLAIN_MESSAGE );
			
				else if (mainMenu.equals(EXIT_GAME))
					{JOptionPane.showMessageDialog(null, "Thank you for playing!");
					option = false; 
					System.exit(0);}
			
				else if (mainMenu.equals(PLAY_GAME))
					{JOptionPane.showMessageDialog(null, "Let's begin!", gameTitle,JOptionPane.PLAIN_MESSAGE );
					option = false;}

				}
		while (option);

8. Create a calling method for the the score keeping. This will new include a new variable call totalScore to help calculate the returing message box  for overAllScore( calling method name). 

 ie:  static void  overAllScore ()	
				{
					
					int totalScore = (int) (((score+antiScore)*.10)*100);	
					
					JOptionPane.showMessageDialog( null,"Your score is: " + totalScore  ) ;
				}

9. Create 8 questions. Store it as questions1ask,questions2ask,questions3ask,questions4ask,questions5ask , questions6ask, questions7ask,questions8ask .

String questions1ask;

ie: 	questions1ask = ("1. What does backslash n do in Java?")+ ("\n\n"+ "A) Causes a backslash to be printed\n"+ "B) Causes the cursor to go to the beginning of the current line, not the next line new line\n"+ "C) Causes the cursor to skip over to the next tab stop\n" + "D) Advances the cursor to the next line for subsequent printing");


10. Create an answer selection bank. Store it as questionsans.


				String[] questionsans;


				questionsans = new String [] {"A", "B", "C", "D"}; //default available choice. This is an array.


9. Display the all question and using the questionans as the selection choice. Store  the  corresponding question as qA1,qA2,qA3,qA4,qA5, qA6,qA7,qA8. ( If wrong, display to the user that the answer is wrong and try again. Add a point to all correct answers via variable score. Decrease by one for all incorrect answer via antiScore. This decistion tree is within a do-while loop which will exit to the next question if the user has it right . 

 
do {
				   qA1= (String) JOptionPane.showInputDialog(null, questions1ask,gameTitle,JOptionPane.QUESTION_MESSAGE,null,questionsans,questionsans[1]);

				 //note , can create one questionsans and use as default since ifelse does check

				if  ( qA1 == "D")
				{

				JOptionPane.showMessageDialog (null, "1. Correct!", gameTitle, JOptionPane.PLAIN_MESSAGE );
				      score ++;overAllScore();}
				
				

				else
				{
				JOptionPane.showMessageDialog (null, "Wrong answer. Try agian!", gameTitle, JOptionPane.PLAIN_MESSAGE );
				
				antiScore --;}

	}
	while (qA1 != "D");	
				




10. Display the score to the user.

11. Display the thank you message to the user.




    • 
